name: Nightly Build

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          # - os: ubuntu-latest
          #   build_type: Debug
          #   compiler: gcc
          #   cc: gcc
          #   cxx: g++
          #   python: '3.13'
          # - os: ubuntu-latest
          #   build_type: Release
          #   compiler: gcc
          #   cc: gcc
          #   cxx: g++
          #   python: '3.13'
          # - os: ubuntu-latest
          #   build_type: Debug
          #   compiler: clang
          #   cc: clang
          #   cxx: clang++
          #   python: 3.13
          # - os: ubuntu-latest
          #   build_type: Release
          #   compiler: clang
          #   cc: clang
          #   cxx: clang++
          #   python: 3.13
          # - os: windows-latest
          #   build_type: Debug
          #   compiler: msvc
          #   python: '3.13'
          - os: windows-latest
            build_type: Release
            compiler: msvc
            python: '3.13'
          # TODO: fix mingw threads
          # - os: windows-latest
          #   build_type: Debug
          #   compiler: mingw
          #   python: '3.13'
          # - os: windows-latest
          #   build_type: Release
          #   compiler: mingw
          #   python: '3.13'

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        submodules: 'recursive'

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python }}

    - name: Install Linux dependencies
      if: runner.os == 'Linux'
      run: |
        sudo apt-get update
        sudo apt-get install -y --no-install-recommends \
          libpng-dev libturbojpeg-dev libvorbis-dev libopenal-dev \
          libsdl2-dev libglu1-mesa-dev libmbedtls-dev libuv1-dev \
          libsqlite3-dev ninja-build patchelf

    - name: Prepare Hashlink third-party includes (Windows)
      if: runner.os == 'Windows'
      shell: pwsh
      run: |
        $HLMOD_INCLUDE_DIR = "hlmod-hl/include"
        $SDL_DIR = Join-Path $HLMOD_INCLUDE_DIR "sdl"
        $OPENAL_DIR = Join-Path $HLMOD_INCLUDE_DIR "openal"
        New-Item -Path $SDL_DIR -ItemType Directory -Force
        New-Item -Path $OPENAL_DIR -ItemType Directory -Force

        Invoke-WebRequest -Uri "https://github.com/libsdl-org/SDL/releases/download/release-2.30.12/SDL2-devel-2.30.12-VC.zip" -OutFile "SDL2-devel.zip"
        Expand-Archive -Path "SDL2-devel.zip" -DestinationPath "$HLMOD_INCLUDE_DIR/sdl_temp"
        $ExtractedSdlDir = Get-ChildItem -Path "$HLMOD_INCLUDE_DIR/sdl_temp" -Directory | Select-Object -First 1
        Move-Item -Path "$($ExtractedSdlDir.FullName)/*" -Destination $SDL_DIR -Force
        Remove-Item -Recurse "$HLMOD_INCLUDE_DIR/sdl_temp"
        Write-Host "Extracted SDL2 to $SDL_DIR"

        Invoke-WebRequest -Uri "https://github.com/kcat/openal-soft/releases/download/1.23.1/openal-soft-1.23.1-bin.zip" -OutFile "openal-soft.zip"
        Expand-Archive -Path "openal-soft.zip" -DestinationPath "$HLMOD_INCLUDE_DIR/openal_temp"
        $ExtractedOpenalDir = Get-ChildItem -Path "$HLMOD_INCLUDE_DIR/openal_temp" -Directory | Select-Object -First 1
        Move-Item -Path "$($ExtractedOpenalDir.FullName)/*" -Destination $OPENAL_DIR -Force
        Remove-Item -Recurse "$HLMOD_INCLUDE_DIR/openal_temp"
        Write-Host "Extracted OpenAL-Soft to $OPENAL_DIR"

    # - name: Install Windows dependencies (MSVC)
    #   if: runner.os == 'Windows' && matrix.compiler == 'msvc'
    #   run: choco install ninja

    - name: Install Windows dependencies (MinGW)
      if: runner.os == 'Windows' && matrix.compiler == 'mingw'
      uses: msys2/setup-msys2@v2
      with:
        msystem: MINGW64
        update: false
        install: >-
          mingw-w64-x86_64-toolchain
          mingw-w64-x86_64-cmake
          mingw-w64-x86_64-ninja
          mingw-w64-x86_64-SDL2
          mingw-w64-x86_64-openal

    - name: Setup MSVC
      if: runner.os == 'Windows' && matrix.compiler == 'msvc'
      uses: ilammy/msvc-dev-cmd@v1

    - uses: krdlab/setup-haxe@v1
      with:
        haxe-version: latest

    - name: Install HL haxelib
      run: haxelib install hashlink

    - name: Configure CMake (Linux)
      if: runner.os == 'Linux'
      env:
          CC: ${{ matrix.cc }}
          CXX: ${{ matrix.cxx }}
      run: |
          cmake -S hlmod-hl -B hlmod-hl/build -G "Ninja" \
          -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}

    - name: Configure CMake (Windows/MSVC)
      if: runner.os == 'Windows' && matrix.compiler == 'msvc'
      run: |
          cmake -S hlmod-hl -B hlmod-hl/build -G "Ninja" `
            -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}

    - name: Configure CMake (Windows/MinGW)
      if: runner.os == 'Windows' && matrix.compiler == 'mingw'
      shell: msys2 {0}
      run: |
          cmake -S hlmod-hl -B hlmod-hl/build -G "Ninja" \
            -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} \
            -DCMAKE_FORCE_UNIX_PATHS=ON

    - name: Build with CMake (Linux)
      if: runner.os == 'Linux'
      run: cmake --build hlmod-hl/build --parallel

    - name: Build with CMake (Windows/MSVC)
      if: runner.os == 'Windows' && matrix.compiler == 'msvc'
      run: cmake --build hlmod-hl/build --parallel

    - name: Build with CMake (Widnows/MinGW)
      if: runner.os == 'Windows' && matrix.compiler == 'mingw'
      shell: msys2 {0}
      run: cmake --build hlmod-hl/build --parallel

    - name: Build hlsteam (Linux)
      if: runner.os == 'Linux'
      env:
          CC: ${{ matrix.cc }}
          CXX: ${{ matrix.cxx }}
      run: |
          mkdir -p hlsteam/native/include/steam
          mkdir -p hlsteam/native/lib/linux64
          cp ./Steamworks-SDK/public/steam/*.h hlsteam/native/include/steam/
          cp ./Steamworks-SDK/redistributable_bin/linux64/libsteam_api.so hlsteam/native/lib/linux64/
          cp ./hlmod-hl/src/hl.h hlsteam/native/include/
          
          cd hlsteam
          make CXXFLAGS="-Inative/include" LFLAGS="-L../hlmod-hl/build/bin"
          cd ..

          cp ./hlsteam/steam.hdll ./hlmod-hl/build/bin/
          patchelf --set-rpath '$ORIGIN' ./hlmod-hl/build/bin/steam.hdll
          cp ./Steamworks-SDK/redistributable_bin/linux64/libsteam_api.so ./hlmod-hl/build/bin/
          chmod 775 ./hlmod-hl/build/bin/libsteam_api.so

    - name: Prepare hlsteam (Windows)
      if: runner.os == 'Windows'
      run: |
          mkdir -p hlsteam/native/include/steam hlsteam/native/lib/win64
          cp ./Steamworks-SDK/public/steam/*.h hlsteam/native/include/steam/
          cp ./Steamworks-SDK/redistributable_bin/win64/steam_api64.lib hlsteam/native/lib/win64/
          cp ./hlmod-hl/src/hl.h hlsteam/native/include/

    - name: Build hlsteam (Windows/MinGW)
      if: runner.os == 'Windows' && matrix.compiler == 'mingw'
      shell: msys2 {0}
      run: |
          cd hlsteam
          make CXXFLAGS="-Inative/include" LFLAGS="-L../hlmod-hl/build/bin -Lnative/lib/win64"
          cd ..
          cp ./hlsteam/steam.hdll ./hlmod-hl/build/bin/steam.hdll
          cp ./Steamworks-SDK/redistributable_bin/win64/steam_api64.dll ./hlmod-hl/build/bin/steam_api64.dll


    - name: Build hlsteam (Windows/MSVC)
      if: runner.os == 'Windows' && matrix.compiler == 'msvg'
      run: |
          set HASHLINK_SRC=..\hlmod-hl
          cd hlsteam
          msbuild hlsteam.vcxproj
          cd ..
          cp hlsteam/x64/Debug/steam.hdll hlmod-hl/build/bin/steam.hdll
          cp Steamworks-SDK/redistributable_bin/win64/steam_api64.dll hlmod-hl/build/bin/steam_api64.dll

    - name: Package for Distribution (Linux)
      if: runner.os == 'Linux'
      run: |
        ARTIFACT_DIR=hlmod-hl/build/bin

        cp -r mods/ $ARTIFACT_DIR/mods/

        LIBPYTHON_PATH=$(ldd $ARTIFACT_DIR/hl | grep libpython | awk '{print $3}')
        if [ ! -f "$LIBPYTHON_PATH" ]; then
            echo "ERROR: Could not find libpython path from ldd output."
            exit 1
        fi
        echo "Found libpython at: $LIBPYTHON_PATH"

        cp "$LIBPYTHON_PATH" "$ARTIFACT_DIR/"
        echo "Copied libpython to artifact directory."

        STDLIB_PATH=$(python3 -c 'import sysconfig; print(sysconfig.get_path("stdlib"))')
        if [ ! -d "$STDLIB_PATH" ]; then
            echo "ERROR: Could not find Python standard library path."
            exit 1
        fi
        echo "Found standard library at: $STDLIB_PATH"

        cp -r "$STDLIB_PATH" "$ARTIFACT_DIR/"
        echo "Copied standard library to artifact directory."

        patchelf --set-rpath '$ORIGIN' $ARTIFACT_DIR/hl
        echo "Set RPATH on hl."

        mv $ARTIFACT_DIR/hl $ARTIFACT_DIR/hl.bin
        cat << 'EOF' > $ARTIFACT_DIR/hl
        #!/bin/sh
        # This script sets up the environment for the real 'hl.bin' executable.

        DIR=$(cd "$(dirname "$0")" && pwd)
        export PYTHONHOME="$DIR"
        export PYTHONPATH="$(find . -name python*)"
        exec "$DIR/hl.bin" "$@"
        EOF
        chmod 775 $ARTIFACT_DIR/hl

    - name: Package for Distribution (Windows)
      if: runner.os == 'Windows'
      shell: pwsh
      run: |
        $ARTIFACT_DIR = "hlmod-hl/build/bin"
        
        Copy-Item -Path "mods" -Destination $ARTIFACT_DIR -Recurse

        $PYTHON_DLL_PATH = Get-Command python | Select-Object -ExpandProperty Source | Split-Path | Join-Path -ChildPath "python*.dll"
        Copy-Item -Path $PYTHON_DLL_PATH -Destination $ARTIFACT_DIR
        Write-Host "Copied Python DLL to artifact directory."

        $STDLIB_PATH = python -c 'import sysconfig; print(sysconfig.get_path("stdlib"))'
        Copy-Item -Path $STDLIB_PATH -Destination $ARTIFACT_DIR -Recurse
        Write-Host "Copied Python standard library to artifact directory."

    - name: Upload Build Artifacts
      uses: actions/upload-artifact@v4
      with:
          name: hlmod-hl-nightly-python${{ matrix.python }}-${{ runner.os }}-${{ matrix.compiler }}-${{ matrix.build_type }}
          path: hlmod-hl/build/bin/